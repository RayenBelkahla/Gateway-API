FROM eclipse-temurin:latest AS builder

WORKDIR /app
RUN apt-get update && apt-get install -y unzip

COPY gradle-8.12.1-bin.zip /opt/gradle/
RUN unzip /opt/gradle/gradle-8.12.1-bin.zip -d /opt/gradle

ENV GRADLE_HOME=/opt/gradle/gradle-8.12.1
ENV PATH="$GRADLE_HOME/bin:$PATH"

COPY gradlew .
COPY gradle gradle

COPY . .

RUN gradle build --no-daemon

FROM eclipse-temurin:latest

WORKDIR /app

COPY --from=builder /app/build/libs/gateway_api-1.0.jar .

EXPOSE 8082

ENTRYPOINT ["java", "-jar", "gateway_api-1.0.jar"]


private final FindByIndexNameSessionRepository<? extends ReactiveRedisIndexedSessionRepository.RedisSession> sessions;

    @Autowired
    public SessionMgmt(FindByIndexNameSessionRepository<? extends ReactiveRedisIndexedSessionRepository.RedisSession> sessions) {
        this.sessions = sessions;
    }

    public Mono<Set<String>> getUserSessions(String principalName) {
        return Mono.justOrEmpty(this.sessions.findByPrincipalName(principalName))
                .map(Map::keySet);
    }

    public Mono<Void> removeSession(String sessionId) {
        return Mono.fromRunnable(() -> this.sessions.deleteById(sessionId));

         private final SessionMgmt sessionMgmtService;
            @Autowired
            public SessionController(SessionMgmt sessionMgmtService) {
                this.sessionMgmtService = sessionMgmtService;
            }

            @GetMapping("/logout")
            public Mono<String> logout(@RequestParam String sessionId) {
                 sessionMgmtService.removeSession(sessionId);
                 return Mono.justOrEmpty("Session terminated successfully");

            }





package org.example.gateway_api.Implementation;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.core.ReactiveRedisTemplate;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;



@Service
public class RedisTokenService {

    private final ReactiveRedisTemplate<String, String> redisTemplate;
    private final OAuth2TokenService oAuth2TokenService;
    @Autowired
    public RedisTokenService(ReactiveRedisTemplate<String, String> redisTemplate, OAuth2TokenService oAuth2TokenService) {
        this.redisTemplate = redisTemplate;
        this.oAuth2TokenService = oAuth2TokenService;
    }

    public Mono<Void> storeToken (String userId) {
        redisTemplate.opsForValue().get()
                .set("user:" + userId + ":access_token", token)
                .subscribe();
        return Mono.empty();
    }

    public Mono<String> getToken(String userId) {
        return redisTemplate.opsForValue()
                .get("user:" + userId + ":access_token");
    }

    public Mono<Boolean> deleteToken(String userId) {
        return redisTemplate.opsForValue()
                .delete("user:" + userId + ":access_token");
    }
}

