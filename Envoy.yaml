static_resources:
  listeners:
    - name: default
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  request_headers_to_add:
                    - header:
                        key: X-Forwarded-Port
                        value: "%DOWNSTREAM_LOCAL_PORT%"
                  virtual_hosts:
                    - name: gateway-service
                      domains: ["*"]
                      routes:
                        - match: {prefix: "/public"}
                          route: {cluster: gateway_service}
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              source_code:
                                inline_string: |
                                  function envoy_on_response(response_handle)
                                    local set_cookie_header= response_handle:headers():get("Set-Cookie")
                                    response_handle:logInfo("result:" .. set_cookie_header)
                                  end
                        - match: { prefix: "/authorize" }
                          route: { cluster: gateway_service}
                        - match: { prefix: "/login"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/oauth2"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/api"}
                          route: { cluster: resource_server}
                        - match: { prefix: "/restricted"}
                          route: { cluster: resource_server}
                        - match: {prefix: "/devices"}
                          route: {cluster: resource_server}
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                          	local cookie_header = request_handle:headers():get("cookie")
                          	local route = request_handle:headers():get(":path")
                          	local method = "GET"
                          	local authority = "localhost:9901"
                          	local cluster_name = "gateway_service"
                          	if string.find(route, "^/api") or string.find(route, "^/restricted") or string.find(route, "^/devices") then
                              
                              local path = "/authorize/get/keycloak"
                              local success, headers, body = pcall(request_handle.httpCall, request_handle,
                              cluster_name,
                              {
                              [":method"] = method,
                              [":path"] = path,
                              [":authority"] = authority,
                              ["Cookie"] = cookie_header
                              },
                              "",
                              5000
                              )
                              
                              local json = require "json"
                              local decoded
                              success, decoded = pcall(json.decode, body)
                              if not success or type(decoded) ~= "table" then
                                request_handle:logErr("Failed json decoding: " .. tostring(body))
                                request_handle:respond({[":status"] = "500"}, "Internal Server Error")
                                return
                              end
                          
                          		local accessToken = decoded["accessTokenValue"]
                                session_id = decoded["id"]
                          		request_handle:headers():add("Authorization", "Bearer " .. accessToken)
                                
                          	end

                          	if string.find(route, "^/devices") then 
                              local cookie = request_handle:headers():get("cookie")
                              local path = "/public/testing"
                              local headers, body = request_handle:httpCall(
                              cluster_name,
                              {
                              [":method"] = method,
                              [":path"] = path,
                              [":authority"] = authority,
                              ["cookie"] = cookie
                              },
                              "",
                              5000)
                              for key, value in pairs(headers) do
                                if key:lower() == "set-cookie" then
                                  set_cookie = value
                                  break
                                end
                          	  end
                            end
                          end

                          function envoy_on_response(response_handle)
                          	if set_cookie then
                              response_handle:logInfo("x-device-id --> " .. set_cookie)
                              response_handle:headers():add("Set-Cookie" , set_cookie)
                          	end
                          response_handle:headers():add("Set-Cookie", "SESSION=" .. session_id .."; Path=/;")
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: gateway_service
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: gateway_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8082
    - name: resource_server
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: resource_server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8085


