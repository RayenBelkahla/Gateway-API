static_resources:
  listeners:
    - name: default
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  request_headers_to_add:
                    - header:
                        key: X-Forwarded-Port
                        value: "%DOWNSTREAM_LOCAL_PORT%"
                  virtual_hosts:
                    - name: gateway-service
                      domains: ["*"]
                      routes:
                        - match: {prefix: "/authorization"}
                          route: {cluster: gateway_service}
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              source_code:
                                inline_string: |

                        - match: { prefix: "/authorize" }
                          route: { cluster: gateway_service}
                        - match: { prefix: "/login"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/oauth2"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/api"}
                          route: { cluster: resource_server}
                        - match: { prefix: "/restricted"}
                          route: { cluster: resource_server}
                        - match: {prefix: "/devices"}
                          route: {cluster: resource_server}
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                            local json = require "json"
                            
                            request_handle:logInfo("Initiating HTTP Call for App Version parsing")
                            local authority = request_handle:headers():get(":authority")
                            local path = "/authorization/headers"
                            local method = "GET"
                            local cluster_name = "gateway_service"
                          
                            -- http call
                            local headers, body = request_handle:httpCall(
                            cluster_name,
                            {
                            [":method"] = method,
                            [":path"] = path,
                            [":authority"] = authority,
                            },
                            "",
                            5000)
                          
                            -- decoding headers returned in body 
                            local decoded 
                            success, decoded = pcall(json.decode, body)
                            if not success or type(decoded) ~= "table" then
                              request_handle:logErr("Failed json decoding: " .. tostring(body))
                              request_handle:respond({[":status"] = "500"}, "Internal Server Error")
                              return
                            end
                            
                            for key,value in pairs (decoded) do
                              request_handle:logInfo("header -> " .. key .. ": " .. value)
                              request_handle:headers():add(key,value)
                            end
                          
                            request_handle:logInfo("Initiating Http call to retrieve and verify x-device-id")
                            local cookie = request_handle:headers():get("cookie")
                            local path = "/authorization/device"
                            local method = "GET"
                          
                            -- http call
                            local headers, body = request_handle:httpCall(
                            cluster_name,
                            {
                            [":method"] = method,
                            [":path"] = path,
                            [":authority"] = authority,
                            ["cookie"] = cookie
                            },
                            "",
                            5000)
                             local index = 0 
                             for key, value in pairs(headers) do
                               if key:lower() == "set-cookie" then
                                 request_handle:streamInfo():dynamicMetadata():set("envoy.lua", "set-cookie-" .. index, value)
                                 request_handle:logInfo("set-cookie header " .. index .. " stored successfully")
                                 break
                               end
                             end
                            local device_id = body
                            path = "/devices/" .. device_id
                            cluster_name = "resource_server"
                          
                            local headers, body = request_handle:httpCall(
                            cluster_name,
                            {
                            [":method"] = method,
                            [":path"] = path,
                            [":authority"] = authority,
                            },
                            "",
                            5000)
                            if headers[":status"] == "200" then
                              request_handle:logInfo("device check -> " ..  body)
                            else
                               request_handle:respond({[":status"] = "401"}, "device-id doesnt exist")
                            end
                          
                          	local cookie_header = request_handle:headers():get("cookie") -- copy all headers 
                          	local route = request_handle:headers():get(":path")
                          	local method = "GET"
                            local authority = request_handle:headers():get(":authority")
                          	local cluster_name = "gateway_service"
                          	if string.find(route, "^/api") or string.find(route, "^/restricted") then
                              req_id = request_handle:headers():get("x-request-id")
                              request_handle:logInfo(" ----------------------------------------------------------------")
                              request_handle:logInfo("request_id: ".. req_id .. " --> Initiating Http Call to retrieve Auth Header triggered by route: " .. route )
                              local path = "/authorize/get/user-access-client"
                              local success, headers, body = pcall(request_handle.httpCall, request_handle,
                              cluster_name,
                              {
                              [":authority"] = authority,
                              [":method"] = method,
                              [":path"] = path,
                              ["Cookie"] = cookie_header
                              },
                              "",
                              5000
                              )
                              if not success or headers[":status"] ~= "200" then
                                request_handle:logErr("Auth check HTTP call failed. Status: " .. headers[":status"])
                                if headers and headers[":status"] == "500" then
                                  request_handle:logInfo("Internal Server Error --> Check logs on Auth client")
                                end
                                return
                              end
                              
                              local decoded
                              success, decoded = pcall(json.decode, body)
                              if not success or type(decoded) ~= "table" then
                                request_handle:logErr("Failed json decoding: " .. tostring(body))
                                request_handle:respond({[":status"] = "500"}, "Internal Server Error")
                                return
                              end
                          
                          		local accessToken = decoded["accessTokenValue"]
                          		-- TODO: retrieve all headers returned in body or header and add them
                                 -- for key, value in pairs(headers) do
                                 -- if key:lower() ~= "expires" then
                                   --  request_handle:logInfo("header= " .. key)
                                   --  request_handle:headers():add(key , value)
                                 -- end
                                -- end
                          		request_handle:headers():add("Authorization", "Bearer " .. accessToken)
                          	end
                          end
                          
                          function envoy_on_response(response_handle)
                            if response_handle:streamInfo():dynamicMetadata():get("envoy.lua") then
                              local set_cookies = response_handle:streamInfo():dynamicMetadata():get("envoy.lua")
                              local index = 0
                          	  while set_cookies["set-cookie-" .. index] do
                                set_cookie = set_cookies["set-cookie-" .. index]
                                response_handle:logInfo("set-cookie header --> " .. set_cookie)
                                response_handle:headers():add("Set-Cookie" , set_cookie)
                                index = index + 1
                          	  end
                            end
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: gateway_service
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: gateway_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8082
    - name: resource_server
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: resource_server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8085