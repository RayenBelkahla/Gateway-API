admin:
  access_log_path: /tmp/envoy_admin_access.log
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
    - name: default
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9990
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  request_headers_to_add:
                    - header:
                        key: X-Forwarded-Port
                        value: "%DOWNSTREAM_LOCAL_PORT%"
                  response_headers_to_add:
                    - header:
                        key: Accept-CH
                        value: Sec-CH-UA-Mobile
                  virtual_hosts:
                    - name: gateway-service
                      domains: ["*"]
                      routes:
                        - match: { prefix: "/logout" }
                          route: { cluster: gateway_service }
                        - match: { prefix: "/authorization" }
                          route: { cluster: gateway_service }

                        - match: { prefix: "/login" }
                          route: { cluster: gateway_service }
                        - match: {prefix: "/oauth2" }
                          route:
                            cluster: gateway_service
                        - match: {prefix: "/bankerise-platform" }
                          route:
                            cluster: bankerise_backend
                            host_rewrite_literal: "showcase-retail-api.pres.proxym-it.net"
                        - match: {prefix: "/register"}
                          route:
                            cluster: gateway_service
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              source_code:
                                inline_string: |
                                  function envoy_on_request(request_handle)
                                    local request_id = request_handle:headers():get("x-request-id")
                                    request_handle:logInfo("Request ID: ".. request_id .. " -> Registering new Device")
                                  end
                                  function envoy_on_response(response_handle)
                                    local cookie = response_handle:headers():get("set-cookie")
                                    response_handle:logInfo("Device Registered: " .. cookie)
                                  end
                http_filters:
                  - name: envoy.filters.http.local_ratelimit
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.local_ratelimit.v3.LocalRateLimit
                      stat_prefix: http_local_rate_limiter
                      token_bucket:
                        max_tokens: 100
                        tokens_per_fill: 2
                        fill_interval: 5s
                      filter_enabled:
                        default_value: { numerator: 10, denominator: HUNDRED }
                      filter_enforced:
                        default_value: { numerator: 5, denominator: HUNDRED }
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                          
                              local version_key = request_handle:headers():get("x-app-version-key")
                              local cookie_main = request_handle:headers():get("cookie")
                              if cookie_main then 
                                local x_device_id = string.find(cookie_main,"X-Device-Id",1,true)
                              end
                              if version_key and x_device_id == nil then
                                  request_handle:logInfo("Mobile device doesn't contain device ID, Device needs to be registered")
                                  request_handle:respond({
                                  [":status"] = "400",
                                  ["X-Device-Info"] = "required"
                                  },"")      
                              end
                          
                              local json = require "json"
                          
                              local request_id = request_handle:headers():get("x-request-id")
                              request_handle:logInfo("-------------- Request Id: " .. request_id .. " --------------")                          
                              request_handle:logInfo("Initiating HTTP Call to retrieve essential headers.")
                          
                              local authority = "localhost:8082"
                              local method = "GET"
                              local cluster_name = "gateway_service"
                              local cookie = request_handle:headers():get("cookie")
                              local versionKey = request_handle:headers():get("X-App-Version-Key")
                              local path = "/configuration/attributes"

                              local headers, body = request_handle:httpCall(
                                  cluster_name,
                                  {   ["X-App-Version-Key"] = versionKey,
                                      [":method"] = method,
                                      [":path"] = path,
                                      [":authority"] = authority,
                                      ["cookie"] = cookie
                                  },
                                  "",
                                  5000
                                   )     
                          
                              if headers[":status"] ~= "200" then
                                request_handle:logErr("Error retrieving essential headers, STATUS: " .. headers[":status"])
                                return
                              end

                              -- decoding json for headers and device id
                              local success, decoded = pcall(json.decode, body)
                              if not success or type(decoded) ~= "table" then
                                  request_handle:logErr("Failed json decoding: " .. tostring(body))
                                  request_handle:respond({[":status"] = "500"}, "Internal Server Error")
                                  return
                              end
                      
                              local ignore = {
                                host                      = true,
                                accesstokenvalue          = true,
                                ["x-app-version-blocked"] = true,
                                notificationtext          = true,
                                gwtokenvalue              = true,    
                                ["x-app-version-key"]     = true,
                                principalname             = true,
                                deviceinfo                = true,
                                clientregid               = true
                              }
                              
                              local index = 0
                              for k, v in pairs(headers) do
                                if k:lower() == "set-cookie" then
                                  request_handle:streamInfo():dynamicMetadata():set(
                                  "envoy.lua", "set_cookie_".. index , v)
                                end
                              end
                            
                              for key, value in pairs(decoded) do
                        
                                if not ignore[key:lower()] then
                        
                                  request_handle:logInfo("header -> " .. key .. ": " .. value)
                                  request_handle:headers():add(key, value)
                        
                                end
                        
                              end
                              local appVersion = decoded["X-App-Version-Blocked"]
                              local notificationText = decoded["NotificationText"]
                        
                              if appVersion then
                        
                                request_handle:logInfo("Verifying App Version validity. ")
                                request_handle:streamInfo():dynamicMetadata():set("envoy.lua","X-App-Version-Blocked",appVersion)
                                local status = request_handle:streamInfo():dynamicMetadata():get("envoy.lua")["X-App-Version-Blocked"]
                                request_handle:logInfo("status ? :" .. status)
                        
                              end
                        
                              if notificationText then 
                                
                                request_handle:logInfo("Notification")
                                request_handle:streamInfo():dynamicMetadata():set("envoy.lua", "NotificationText" ,notificationText)
                        
                                local status = request_handle:streamInfo():dynamicMetadata():get("envoy.lua")["X-App-Version-Blocked"]
                        
                                  if tostring(status) == "True" then 
                                    request_handle:logErr("BLOCKED VERSION --> Rejecting Request ")
                                    request_handle:respond({
                                    [":status"] = "403",
                                    ["content-type"] = "text/plain",
                                    ["X-app-Version-Blocked"] = True  
                                  }, "Forbidden\n" .. "NotificationText: " .. tostring(notificationText))
                                  end 
                        
                              end
                             
                              if decoded["accessTokenValue"] then
                                request_handle:headers():add("Authorization", "Bearer " .. decoded["accessTokenValue"])
                                request_handle:logInfo("Access Token added to Authorization header successfully.")
                              end
                            end

                            function envoy_on_response(response_handle)
                          
                              local data = response_handle:streamInfo():dynamicMetadata():get("envoy.lua")
                              local index = 0
                              if data then
                                if data["set_cookie_" .. index] then
                                      local cookie = data["set_cookie_" .. index]
                                      response_handle:headers():add("Set-Cookie", cookie)
                                end
                                if data["X-App-Version-Blocked"] then
                                  response_handle:logWarn("Returning Blocking response headers ,Blocking status: " .. data["X-App-Version-Blocked"])
                                  response_handle:headers():add("X-App-Version-Blocked",data["X-App-Version-Blocked"])
                                  response_handle:headers():add("X-Notification-Text", data["NotificationText"])
                                end
                              end                          
                            end

                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: gateway_service
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: gateway_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8082
    - name: resource_server
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: resource_server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8085
    - name: bankerise_backend
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: bankerise_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 169.255.70.164
                      port_value: 80
