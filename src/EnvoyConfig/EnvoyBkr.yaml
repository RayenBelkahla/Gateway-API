admin:
  access_log_path: /tmp/envoy_admin_access.log
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
    - name: default
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9990
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  request_headers_to_add:
                    - header:
                        key: X-Forwarded-Port
                        value: "%DOWNSTREAM_LOCAL_PORT%"
                  response_headers_to_add:
                        - header:
                            key: Accept-CH
                            value: Sec-CH-UA-Mobile
                  virtual_hosts:
                    - name: gateway-service
                      domains: ["*"]
                      routes:
                        - match: {prefix: "/authorization"}
                          route: {cluster: gateway_service}
                        - match: { prefix: "/authorize" }
                          route: { cluster: gateway_service}
                        - match: { prefix: "/login"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/oauth2"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/api"}
                          route: { cluster: resource_server}
                        - match: { prefix: "/restricted"}
                          route: { cluster: resource_server}
                        - match: {prefix: "/devices"}
                          route: {cluster: resource_server}
                        - match: {prefix: "/bankerise-platform"}
                          route: {cluster: bankerise_backend}
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                            local json = require "json"
                            request_handle:logInfo("Starting HTTP Call for App Version Parsing")
                        
                            -- function for making HTTP calls to decrease redundancy
                            local function make_http_call(cluster_name, method, path, authority, headers, body, timeout)
                            return request_handle:httpCall(
                            cluster_name,
                            {
                              [":method"] = method,
                              [":path"] = path,
                              [":authority"] = authority,
                              ["cookie"] = headers["cookie"],
                              ["Authorization"] = headers["Authorization"],
                              ["Accept"] = "*/*",
                              ["X-App-ID"] = headers["X-App-ID"],
                              ["Channel"] = headers["Channel"],
                              ["Accept-Encoding"] = "gzip",
                              ["Content-Type"] = "application/json"
                            },
                            body or "",
                            timeout or 5000
                            )
                            end
                        
                            -- Get common headers
                            local cookie_header = request_handle:headers():get("cookie")
                            local authority_header = request_handle:headers():get(":authority")
                            local user_agent_header = request_handle:headers():get("user-agent")
                            local channel_header = request_handle:headers():get("Channel")
                        
                            -- Prepare common headers for all requests
                            local common_request_headers = {
                            ["cookie"] = cookie_header,
                            ["Authorization"] = "Bearer eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJDN2dWblpuS3c3WmFTZ3JETDNnSEtrdGtxMzgya3piSEp5dWNDTUJZcVpRIn0.eyJleHAiOjE3NDY3MjgzMjgsImlhdCI6MTc0NjcyODAyOCwianRpIjoiYjVmZWI1ZTUtOWU2MS00ODAxLWI4Y2EtMWFiZDNlYjU3YjY1IiwiaXNzIjoiaHR0cDovL3BsYXRmb3JtLWtleWNsb2FrLnByZXMucHJveHltLWl0Lm5ldC9yZWFsbXMvc2hvd2Nhc2UtYWRtaW4tZGV2IiwiYXVkIjoiYWNjb3VudCIsInN1YiI6IjdiNzc1M2ZhLWMwMzQtNDQ3OS04ZjBhLWQzNzg3ZmJlMDI0ZCIsInR5cCI6IkJlYXJlciIsImF6cCI6ImFwaV9nYXRld2F5X2Zyb250IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyIqIl0sInJlYWxtX2FjY2VzcyI6eyJyb2xlcyI6WyJkZWZhdWx0LXJvbGVzLXNob3djYXNlLWFkbWluLWRldiIsIm9mZmxpbmVfYWNjZXNzIiwidW1hX2F1dGhvcml6YXRpb24iXX0sInJlc291cmNlX2FjY2VzcyI6eyJhY2NvdW50Ijp7InJvbGVzIjpbIm1hbmFnZS1hY2NvdW50IiwibWFuYWdlLWFjY291bnQtbGlua3MiLCJ2aWV3LXByb2ZpbGUiXX19LCJzY29wZSI6Im9wZW5pZCBlbWFpbCBwcm9maWxlIiwiZW1haWxfdmVyaWZpZWQiOmZhbHNlLCJjbGllbnRIb3N0IjoiMTAuNDIuMjI0LjU0IiwicHJlZmVycmVkX3VzZXJuYW1lIjoic2VydmljZS1hY2NvdW50LWFwaV9nYXRld2F5X2Zyb250IiwiY2xpZW50QWRkcmVzcyI6IjEwLjQyLjIyNC41NCIsImNsaWVudF9pZCI6ImFwaV9nYXRld2F5X2Zyb250In0.M0hFMSLO6yuwcB4WoSsK3WDOU6K_y8AYG18ruotdxLqn66zi7mNar58FBg_fCjvKOBg8Gl_9IZ6wqSlO2KvSH_f2_VzuiJ4gbUFFZrNRGdN9cgE-7IXfdK6ESTVDeOjCtK5i1hSWcq_68VNe-_vdHd0BHLqxVlLIoaTyOyvA46oUOeiVQHH1i44_OqpL7xKCSu7nVpwqLpMZuRldYH_v6JOBhg-_0RUU8PWCcAqzY5oWhExoMLBi_vJyx5_qDkFWfysVndobD8kP_Fd_P3alUU63mUXBwL3bVSU5KIqNLerPUyv42xmAeG8FugWc9td551LrHbeCgkznHspspGJuoQ",
                            ["X-App-ID"] = "api_gateway_front",
                            ["Channel"] = "API",
                            ["User-Agent"] = user_agent_header
                            }
                        
                            -- 1. Retrieve App Version List
                            local app_version_path = "/bankerise-platform/configuration/appversions"
                            local app_version_cluster = "bankerise_backend"
                            local request_method = "GET"
                            local response_headers, response_body = make_http_call(app_version_cluster, request_method, app_version_path, "showcase-retail-api.pres.proxym-it.net", common_request_headers)
                            
                            if response_headers[":status"] ~= "200" then
                            request_handle:logErr("Failed to retrieve app version list. Status: " .. response_headers[":status"])
                            return
                            end
                            
                            -- Decode the response
                            local decode_success, decoded_body = pcall(json.decode, response_body)
                            if not decode_success or type(decoded_body) ~= "table" then
                            request_handle:logErr("Failed to decode JSON: " .. tostring(response_body))
                                return
                            end
                            
                            request_handle:logInfo("Successfully retrieved app version list: " .. response_body)
                        
                            -- 2. Post App Version List to Gateway Service
                            local save_app_version_path = "/authorization/app-versions/save"
                            local save_app_version_cluster = "gateway_service"
                            local save_request_method = "POST"
                            local save_response_headers, save_response_body = make_http_call(
                            save_app_version_cluster,
                            save_request_method,
                            save_app_version_path,
                            authority_header,
                            common_request_headers,
                            json.encode(decoded_body)
                            )
                            request_handle:logInfo("Post request status: " .. save_response_headers[":status"])
                        
                            -- Log the response headers
                            for header_name, header_value in pairs(save_response_headers) do
                            request_handle:logInfo("Response Header: " .. header_name .. " = " .. header_value)
                            end
                        
                            -- 3. Verify X-Device-ID
                            local device_verification_path = "/authorization/device"
                            local device_verification_cluster = "gateway_service"
                            local device_verification_headers, device_verification_body = make_http_call(
                            device_verification_cluster,
                            "GET",
                            device_verification_path,
                            authority_header,
                            common_request_headers
                            )
                            
                            if device_verification_headers[":status"] == "400" then
                            request_handle:logInfo("Device ID not found. Request rejected.")
                            return
                            end
                        
                            -- 4. Handle Device ID
                            local device_id = tostring(device_verification_body)
                            local device_path = "/devices/" .. device_id
                            local device_cluster = "resource_server"
                            -- HTTP Call
                            local device_headers, device_body = make_http_call(
                            device_cluster,
                            "GET",
                            device_path,
                            authority_header,
                            common_request_headers
                            )
                        
                            if device_headers[":status"] == "200" and device_body ~= "null" then
                              request_handle:logInfo("Device found: " .. device_body)
                            else
                              -- Generate new Device ID
                              request_handle:logInfo("Generating new device ID")
                              local create_device_path = "/device-management/create/device"
                              local create_device_cluster = "gateway_service"
                              local create_device_headers, create_device_body = make_http_call(
                              create_device_cluster,
                              "GET",
                              create_device_path,
                              authority_header,
                              common_request_headers
                              )
                            
                              if create_device_headers[":status"] == "200" then
                                request_handle:logInfo("New Device Created: " .. create_device_body)
                            
                                -- Save the new device info
                                local save_device_path = "/devices/save"
                                local save_device_cluster = "resource_server"
                                local save_device_headers, save_device_body = make_http_call(
                                save_device_cluster,
                                "POST",
                                save_device_path,
                                authority_header,
                                common_request_headers,
                                create_device_body
                                )
                                request_handle:logInfo("Device info saved. Response: " .. save_device_body)
                              end
                            end
                          end
                            
                          function envoy_on_response(response_handle)
                            local metadata = response_handle:streamInfo():dynamicMetadata():get("envoy.lua")
                            if metadata then
                              local index = 0
                              while metadata["set-cookie-" .. index] do
                                local set_cookie_value = metadata["set-cookie-" .. index]
                                response_handle:logInfo("Set-Cookie Header:" .. set_cookie_value)
                                response_handle:headers():add("Set-Cookie", set_cookie_value)
                                index = index + 1
                              end
                            end
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: gateway_service
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: gateway_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8082
    - name: resource_server
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: resource_server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8085
    - name: bankerise_backend
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: bankerise_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 169.255.70.164
                      port_value: 80