admin:
  access_log_path: /tmp/envoy_admin_access.log
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9901
static_resources:
  listeners:
    - name: default
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9990
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  request_headers_to_add:
                    - header:
                        key: X-Forwarded-Port
                        value: "%DOWNSTREAM_LOCAL_PORT%"
                  response_headers_to_add:
                        - header:
                            key: Accept-CH
                            value: Sec-CH-UA-Mobile
                  virtual_hosts:
                    - name: gateway-service
                      domains: ["*"]
                      routes:
                        - match: {prefix: "/configuration"}
                          route: {cluster: gateway_service}
                        - match: { prefix: "/authorize" }
                          route: { cluster: gateway_service}
                        - match: { prefix: "/login"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/oauth2"}
                          route: { cluster: gateway_service}
                        - match: { prefix: "/api"}
                          route: { cluster: resource_server}
                        - match: { prefix: "/restricted"}
                          route: { cluster: resource_server}
                        - match: {prefix: "/devices"}
                          route: {cluster: resource_server}
                        - match: {prefix: "/bankerise-platform"}
                          route: {cluster: bankerise_backend}
                http_filters:
                  - name: envoy.filters.http.lua
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      default_source_code:
                        inline_string: |
                          function envoy_on_request(request_handle)
                            local json = require "json"
                            
                            request_handle:logInfo("Initiating HTTP Call for App Version parsing")
                            local authority = request_handle:headers():get(":authority")
                            local path = "/configuration/app-headers" -- 1 returns x-app-id, channel + x-app-version-key when provided 
                            local method = "GET"
                            local cluster_name = "gateway_service"
                          
                            -- http call retrieving headers from gateway_service
                            local headers, body = request_handle:httpCall(
                            cluster_name,
                            {
                            [":method"] = method,
                            [":path"] = path,
                            [":authority"] = authority,
                            },
                            "",
                            5000)
                          
                            -- decoding headers returned in body 
                            local decoded 
                            success, decoded = pcall(json.decode, body)
                            if not success or type(decoded) ~= "table" then
                              request_handle:logErr("Failed json decoding: " .. tostring(body))
                              request_handle:respond({[":status"] = "500"}, "Internal Server Error")
                              return
                            end
                            
                            for key,value in pairs (decoded) do
                              request_handle:logInfo("header -> " .. key .. ": " .. value)
                              request_handle:headers():add(key,value)
                            end
                          
                            request_handle:logInfo("Initiating Http call to retrieve and verify x-device-id") -- 2 
                            local cookie = request_handle:headers():get("cookie")
                            local path = "/configuration/device"
                            local method = "GET"
                          
                            -- http call
                            local headers, body = request_handle:httpCall(
                            cluster_name,
                            {
                            [":method"] = method,
                            [":path"] = path,
                            [":authority"] = authority,
                            ["cookie"] = cookie
                            },
                            "",
                            5000)
                            if headers[":status"] == "400" then -- Warning This is needed 
                              request_handle:logInfo("mobile device doesnt contain x-device-id cookie request rejected.")
                              return
                            end   
                            local index = 0 
                            for key, value in pairs(headers) do
                              if key:lower() == "set-cookie" then
                                request_handle:streamInfo():dynamicMetadata():set("envoy.lua", "set-cookie-" .. index, value)
                                request_handle:logInfo("set-cookie header " .. index .. " stored successfully")
                                break
                              end
                            end
                            request_handle:logInfo("Verifying Device-Id existence in resource server backend") -- Warning this must be included following the process 
                            local device_id = body
                            path = "/devices/" .. device_id
                            cluster_name = "resource_server"
                          
                            local headers, body = request_handle:httpCall(
                            cluster_name,
                            {
                            [":method"] = method,
                            [":path"] = path,
                            [":authority"] = authority,
                            },
                            "",
                            5000)
                            if headers[":status"] == "200" then
                              request_handle:logInfo("device check -> " ..  body)
                              local device_info = tostring(body)
                              if body == "null" then
                                request_handle:logErr("Device doesn't exist. Returned: " .. tostring(body))
                                request_handle:logInfo("Generating DeviceId and posting DeviceInfo to RS")
                            
                                -- http Call to create new Device info
                              
                                local cluster = "gateway_service"
                                local authority = request_handle:headers():get(":authority")
                                local UA = request_handle:headers():get("user-agent")
                                local cookie = request_handle:headers():get("cookie")
                                local channel = request_handle:headers():get("channel")
                                local create_path = "/device-management/create/device"
                                local create_headers = {
                                [":method"] = "GET",
                                [":path"] = create_path,
                                [":authority"] = authority,
                                ["cookie"] = cookie,
                                ["user-agent"] = UA,
                                ["channel"] = channel
                                }
                            
                                local create_resp_headers, create_body = request_handle:httpCall(
                                cluster,
                                create_headers,
                                "",
                                5000
                                )
                                -- http Call to save device Info in Resource Server
                                local device_info = tostring(create_body)
                                request_handle:logInfo("Device created: " .. device_info)
                                local cluster = "resource_server"
                                local save_path = "/devices/save"
                                local save_headers = {
                                [":method"] = "POST",
                                [":path"] = save_path,
                                [":authority"] = authority,
                                ["cookie"] = cookie,
                                ["user-agent"] = UA,
                                ["content-type"] = "application/json"
                                }
                            
                                local save_resp_headers, save_resp_body = request_handle:httpCall(
                                cluster,
                                save_headers,
                                device_info,
                                5000
                                )
                                request_handle:logInfo("Device info saved in RS. Response: " .. tostring(save_resp_body))
                          
                                
                                return
                              end
                              -- Http Call to save Device Info in Session
                              request_handle:logInfo("saving device info in session")
                              local cluster = "gateway_service"
                              local path = "/device-management/save/device"
                              local headers, body = request_handle:httpCall(
                              cluster,
                              {
                              ["cookie"] = cookie,
                              [":method"] = "GET",
                              [":path"] = path,
                              [":authority"] = authority,
                              ["content-type"] = "application/json"
                              },
                              tostring(device_info),
                              5000)
                              request_handle:logInfo("device-management/save/device status -> " .. tostring(headers[":status"]))  
                      
                            else
                              request_handle:logInfo("Unable to access RS, verify connection")
                            end
                            -- copy all headers 
                          	local cookie_header = request_handle:headers():get("cookie") 
                          	local route = request_handle:headers():get(":path")
                          	local method = "GET"
                            local authority = request_handle:headers():get(":authority")
                          	local cluster_name = "gateway_service"
                          	if string.find(route, "^/api") or string.find(route, "^/restricted") then
                              req_id = request_handle:headers():get("x-request-id")
                              request_handle:logInfo(" ----------------------------------------------------------------")
                              request_handle:logInfo("request_id: ".. req_id .. " --> Initiating Http Call to retrieve Auth Header triggered by route: " .. route )
                              local path = "/configuration/attributes/user-access-client" -- this is the route that will contain all headers 
                              local success, headers, body = pcall(request_handle.httpCall, request_handle,
                              cluster_name,
                              {
                              [":authority"] = authority,
                              [":method"] = method,
                              [":path"] = path,
                              ["Cookie"] = cookie_header
                              },
                              "",
                              5000
                              )
                              if not success or headers[":status"] ~= "200" then
                                request_handle:logErr("Auth check HTTP call failed. Status: " .. headers[":status"])
                                if headers and headers[":status"] == "500" then
                                  request_handle:logInfo("Internal Server Error --> Check logs on Auth client")
                                end
                                return
                              end
                              
                              local decoded
                              success, decoded = pcall(json.decode, body)
                              if not success or type(decoded) ~= "table" then
                                request_handle:logErr("Failed json decoding: " .. tostring(body))
                                request_handle:respond({[":status"] = "500"}, "Internal Server Error")
                                return
                              end
                          
                          		local accessToken = decoded["accessTokenValue"]
                                local headerTable = decoded["additionalHeaders"]
                          		-- TODO: retrieve all headers returned in body or header and add them
                                for key, value in pairs(headerTable) do
                                  if key:lower() ~= "host" then 
                                    request_handle:logInfo("header = " .. key .. ": " .. value)
                                    request_handle:headers():add(key , value)
                                  end
                                end
                          		request_handle:headers():add("Authorization", "Bearer " .. accessToken)
                          	end
                          end
                          
                          function envoy_on_response(response_handle)
                            if response_handle:streamInfo():dynamicMetadata():get("envoy.lua") then
                              local set_cookies = response_handle:streamInfo():dynamicMetadata():get("envoy.lua")
                              local index = 0
                          	  while set_cookies["set-cookie-" .. index] do
                                set_cookie = set_cookies["set-cookie-" .. index]
                                response_handle:logInfo("set-cookie header --> " .. set_cookie)
                                response_handle:headers():add("Set-Cookie" , set_cookie)
                                index = index + 1
                          	  end
                            end
                          end
                  - name: envoy.filters.http.router
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router

  clusters:
    - name: gateway_service
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: gateway_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8082
    - name: resource_server
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: resource_server
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: localhost
                      port_value: 8085
    - name: bankerise_backend
      connect_timeout: 5s
      type: STRICT_DNS
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: bankerise_backend
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 169.255.70.164
                      port_value: 80